#include <iostream> 

using namespace std; 

void b17()
{
	int value{ 0 }; 
	int Value{ 0 };
	// 遵循 小写变量  大写处理 类 枚举 结构  
	int valeUe(6);
	cout << valeUe;

	//int valeUe(6); 虽然可以， 但是建议使用大括号 
}

// 专门找时间说了一下 关于代码的命名不放呢， 总的来说就是不要缩写，  要写具体的情况的的表达， 不要 a  b  y i xy   等待



// 什么是标识符 ？   变量的命名 称为标识符 
// 标志符命名 ？ 注意不要用特殊字符 空额 符号等 可以用下划线处理 




//alignas 
//alignof
//and  用过 用来逻辑判断 
//and_eq
//asm 
//auto  
//bitand 
//bitor  
//bool  用过 
//break 流程中返回 
//case   
//catch  报错时候用 
//char  字符串 处理 
//char8_t(since C++20)
//char16_t  
//char32_t
//class  类的构造 
//compl 
//concept (since C++20)
//const  常数的构造 
//consteval (since C++20)
//constexpr 
//constinit(since C++20)
//const_cast
//continue  循环跳过 
//co_await(since C++20)
//co_return (since C++20)
//co_yield (since C++20)
//decltype
//default  逻辑模式处理 
//delete  删除 
//do   循环处理 
//double  数据类型 
//dynamic_cast
//else  逻辑处理 
//enum   枚举类型 
//explicit
//export  扩展看到过 
//extern
//false   判断类型
//float   数据类型 
//for     流程类型 
//friend
//goto   流程相关建议不使用 
//if    流程相关 
//inline  
//int  数据类型 
//long  数据类型 
//mutable 
//namespace 名称控件处理情况 
//new   构建类型 
//noexcept
//not  逻辑相关 
//not_eq
//nullptr
//operator  操作符号 
//or  逻辑相关 
//or_eq
//private   类构造私有  
//protected   类构造可继承 
//public   类构造公开方法 
//register  注册相关 
//reinterpret_cast
//requires (since C++20)
//return  返回数据类型 
//short   数据类型 
//signed  
//sizeof  查看大小 
//static  静态字段
//static_assert
//static_cast
//struct  结构类型 
//switch  逻辑处理 
//template  模板听说过 不知道怎么用 
//this   相当于self 把 
//thread_local
//throw  用来主动抛出异常 
//true   判断 
//try   防止报错 
//typedef  这里应该可以定义自己的类型  
//typeid
//typename
//union  
//unsigned
//using  用来处理引用 名称空间什么的 
//virtual  虚方法 一般不使用 
//void  空方法 
//volatile
//wchar_t
//while   循环处理   
//xor
//xor_eq